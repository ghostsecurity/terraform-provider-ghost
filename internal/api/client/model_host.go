/*
Ghost API

The Ghost API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Host type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Host{}

// Host struct for Host
type Host struct {
	Certificates []Certificate `json:"certificates"`
	Cnames []HostCNAMEInfo `json:"cnames"`
	CreatedAt string `json:"created_at"`
	DomainId string `json:"domain_id"`
	Id string `json:"id"`
	Ipv4Addresses []HostAddressInfo `json:"ipv4_addresses"`
	Ipv6Addresses []HostAddressInfo `json:"ipv6_addresses"`
	Name string `json:"name"`
	TlsVersions []string `json:"tls_versions"`
	UpdatedAt string `json:"updated_at"`
}

type _Host Host

// NewHost instantiates a new Host object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHost(certificates []Certificate, cnames []HostCNAMEInfo, createdAt string, domainId string, id string, ipv4Addresses []HostAddressInfo, ipv6Addresses []HostAddressInfo, name string, tlsVersions []string, updatedAt string) *Host {
	this := Host{}
	this.Certificates = certificates
	this.Cnames = cnames
	this.CreatedAt = createdAt
	this.DomainId = domainId
	this.Id = id
	this.Ipv4Addresses = ipv4Addresses
	this.Ipv6Addresses = ipv6Addresses
	this.Name = name
	this.TlsVersions = tlsVersions
	this.UpdatedAt = updatedAt
	return &this
}

// NewHostWithDefaults instantiates a new Host object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostWithDefaults() *Host {
	this := Host{}
	return &this
}

// GetCertificates returns the Certificates field value
func (o *Host) GetCertificates() []Certificate {
	if o == nil {
		var ret []Certificate
		return ret
	}

	return o.Certificates
}

// GetCertificatesOk returns a tuple with the Certificates field value
// and a boolean to check if the value has been set.
func (o *Host) GetCertificatesOk() ([]Certificate, bool) {
	if o == nil {
		return nil, false
	}
	return o.Certificates, true
}

// SetCertificates sets field value
func (o *Host) SetCertificates(v []Certificate) {
	o.Certificates = v
}

// GetCnames returns the Cnames field value
func (o *Host) GetCnames() []HostCNAMEInfo {
	if o == nil {
		var ret []HostCNAMEInfo
		return ret
	}

	return o.Cnames
}

// GetCnamesOk returns a tuple with the Cnames field value
// and a boolean to check if the value has been set.
func (o *Host) GetCnamesOk() ([]HostCNAMEInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cnames, true
}

// SetCnames sets field value
func (o *Host) SetCnames(v []HostCNAMEInfo) {
	o.Cnames = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Host) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Host) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Host) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetDomainId returns the DomainId field value
func (o *Host) GetDomainId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DomainId
}

// GetDomainIdOk returns a tuple with the DomainId field value
// and a boolean to check if the value has been set.
func (o *Host) GetDomainIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DomainId, true
}

// SetDomainId sets field value
func (o *Host) SetDomainId(v string) {
	o.DomainId = v
}

// GetId returns the Id field value
func (o *Host) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Host) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Host) SetId(v string) {
	o.Id = v
}

// GetIpv4Addresses returns the Ipv4Addresses field value
func (o *Host) GetIpv4Addresses() []HostAddressInfo {
	if o == nil {
		var ret []HostAddressInfo
		return ret
	}

	return o.Ipv4Addresses
}

// GetIpv4AddressesOk returns a tuple with the Ipv4Addresses field value
// and a boolean to check if the value has been set.
func (o *Host) GetIpv4AddressesOk() ([]HostAddressInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ipv4Addresses, true
}

// SetIpv4Addresses sets field value
func (o *Host) SetIpv4Addresses(v []HostAddressInfo) {
	o.Ipv4Addresses = v
}

// GetIpv6Addresses returns the Ipv6Addresses field value
func (o *Host) GetIpv6Addresses() []HostAddressInfo {
	if o == nil {
		var ret []HostAddressInfo
		return ret
	}

	return o.Ipv6Addresses
}

// GetIpv6AddressesOk returns a tuple with the Ipv6Addresses field value
// and a boolean to check if the value has been set.
func (o *Host) GetIpv6AddressesOk() ([]HostAddressInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ipv6Addresses, true
}

// SetIpv6Addresses sets field value
func (o *Host) SetIpv6Addresses(v []HostAddressInfo) {
	o.Ipv6Addresses = v
}

// GetName returns the Name field value
func (o *Host) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Host) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Host) SetName(v string) {
	o.Name = v
}

// GetTlsVersions returns the TlsVersions field value
func (o *Host) GetTlsVersions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.TlsVersions
}

// GetTlsVersionsOk returns a tuple with the TlsVersions field value
// and a boolean to check if the value has been set.
func (o *Host) GetTlsVersionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TlsVersions, true
}

// SetTlsVersions sets field value
func (o *Host) SetTlsVersions(v []string) {
	o.TlsVersions = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Host) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Host) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Host) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

func (o Host) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Host) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["certificates"] = o.Certificates
	toSerialize["cnames"] = o.Cnames
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["domain_id"] = o.DomainId
	toSerialize["id"] = o.Id
	toSerialize["ipv4_addresses"] = o.Ipv4Addresses
	toSerialize["ipv6_addresses"] = o.Ipv6Addresses
	toSerialize["name"] = o.Name
	toSerialize["tls_versions"] = o.TlsVersions
	toSerialize["updated_at"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *Host) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"certificates",
		"cnames",
		"created_at",
		"domain_id",
		"id",
		"ipv4_addresses",
		"ipv6_addresses",
		"name",
		"tls_versions",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHost := _Host{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHost)

	if err != nil {
		return err
	}

	*o = Host(varHost)

	return err
}

type NullableHost struct {
	value *Host
	isSet bool
}

func (v NullableHost) Get() *Host {
	return v.value
}

func (v *NullableHost) Set(val *Host) {
	v.value = val
	v.isSet = true
}

func (v NullableHost) IsSet() bool {
	return v.isSet
}

func (v *NullableHost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHost(val *Host) *NullableHost {
	return &NullableHost{value: val, isSet: true}
}

func (v NullableHost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


