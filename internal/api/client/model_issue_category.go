/*
Ghost API

The Ghost API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IssueCategory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IssueCategory{}

// IssueCategory struct for IssueCategory
type IssueCategory struct {
	BestPractices string `json:"best_practices"`
	Description string `json:"description"`
	ExecutiveSummary string `json:"executive_summary"`
	Icon Icon `json:"icon"`
	Id string `json:"id"`
	Name string `json:"name"`
	Vulnerabilities *VulnerabilityCount `json:"vulnerabilities,omitempty"`
}

type _IssueCategory IssueCategory

// NewIssueCategory instantiates a new IssueCategory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueCategory(bestPractices string, description string, executiveSummary string, icon Icon, id string, name string) *IssueCategory {
	this := IssueCategory{}
	this.BestPractices = bestPractices
	this.Description = description
	this.ExecutiveSummary = executiveSummary
	this.Icon = icon
	this.Id = id
	this.Name = name
	return &this
}

// NewIssueCategoryWithDefaults instantiates a new IssueCategory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueCategoryWithDefaults() *IssueCategory {
	this := IssueCategory{}
	return &this
}

// GetBestPractices returns the BestPractices field value
func (o *IssueCategory) GetBestPractices() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BestPractices
}

// GetBestPracticesOk returns a tuple with the BestPractices field value
// and a boolean to check if the value has been set.
func (o *IssueCategory) GetBestPracticesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BestPractices, true
}

// SetBestPractices sets field value
func (o *IssueCategory) SetBestPractices(v string) {
	o.BestPractices = v
}

// GetDescription returns the Description field value
func (o *IssueCategory) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *IssueCategory) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *IssueCategory) SetDescription(v string) {
	o.Description = v
}

// GetExecutiveSummary returns the ExecutiveSummary field value
func (o *IssueCategory) GetExecutiveSummary() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExecutiveSummary
}

// GetExecutiveSummaryOk returns a tuple with the ExecutiveSummary field value
// and a boolean to check if the value has been set.
func (o *IssueCategory) GetExecutiveSummaryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExecutiveSummary, true
}

// SetExecutiveSummary sets field value
func (o *IssueCategory) SetExecutiveSummary(v string) {
	o.ExecutiveSummary = v
}

// GetIcon returns the Icon field value
func (o *IssueCategory) GetIcon() Icon {
	if o == nil {
		var ret Icon
		return ret
	}

	return o.Icon
}

// GetIconOk returns a tuple with the Icon field value
// and a boolean to check if the value has been set.
func (o *IssueCategory) GetIconOk() (*Icon, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Icon, true
}

// SetIcon sets field value
func (o *IssueCategory) SetIcon(v Icon) {
	o.Icon = v
}

// GetId returns the Id field value
func (o *IssueCategory) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IssueCategory) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *IssueCategory) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *IssueCategory) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *IssueCategory) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *IssueCategory) SetName(v string) {
	o.Name = v
}

// GetVulnerabilities returns the Vulnerabilities field value if set, zero value otherwise.
func (o *IssueCategory) GetVulnerabilities() VulnerabilityCount {
	if o == nil || IsNil(o.Vulnerabilities) {
		var ret VulnerabilityCount
		return ret
	}
	return *o.Vulnerabilities
}

// GetVulnerabilitiesOk returns a tuple with the Vulnerabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueCategory) GetVulnerabilitiesOk() (*VulnerabilityCount, bool) {
	if o == nil || IsNil(o.Vulnerabilities) {
		return nil, false
	}
	return o.Vulnerabilities, true
}

// HasVulnerabilities returns a boolean if a field has been set.
func (o *IssueCategory) HasVulnerabilities() bool {
	if o != nil && !IsNil(o.Vulnerabilities) {
		return true
	}

	return false
}

// SetVulnerabilities gets a reference to the given VulnerabilityCount and assigns it to the Vulnerabilities field.
func (o *IssueCategory) SetVulnerabilities(v VulnerabilityCount) {
	o.Vulnerabilities = &v
}

func (o IssueCategory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssueCategory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["best_practices"] = o.BestPractices
	toSerialize["description"] = o.Description
	toSerialize["executive_summary"] = o.ExecutiveSummary
	toSerialize["icon"] = o.Icon
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.Vulnerabilities) {
		toSerialize["vulnerabilities"] = o.Vulnerabilities
	}
	return toSerialize, nil
}

func (o *IssueCategory) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"best_practices",
		"description",
		"executive_summary",
		"icon",
		"id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIssueCategory := _IssueCategory{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIssueCategory)

	if err != nil {
		return err
	}

	*o = IssueCategory(varIssueCategory)

	return err
}

type NullableIssueCategory struct {
	value *IssueCategory
	isSet bool
}

func (v NullableIssueCategory) Get() *IssueCategory {
	return v.value
}

func (v *NullableIssueCategory) Set(val *IssueCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueCategory(val *IssueCategory) *NullableIssueCategory {
	return &NullableIssueCategory{value: val, isSet: true}
}

func (v NullableIssueCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


