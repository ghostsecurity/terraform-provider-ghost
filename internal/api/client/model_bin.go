/*
Ghost API

The Ghost API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Bin type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Bin{}

// Bin struct for Bin
type Bin struct {
	Count int32 `json:"count"`
	IntervalEnd string `json:"interval_end"`
	IntervalStart string `json:"interval_start"`
}

type _Bin Bin

// NewBin instantiates a new Bin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBin(count int32, intervalEnd string, intervalStart string) *Bin {
	this := Bin{}
	this.Count = count
	this.IntervalEnd = intervalEnd
	this.IntervalStart = intervalStart
	return &this
}

// NewBinWithDefaults instantiates a new Bin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBinWithDefaults() *Bin {
	this := Bin{}
	return &this
}

// GetCount returns the Count field value
func (o *Bin) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *Bin) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *Bin) SetCount(v int32) {
	o.Count = v
}

// GetIntervalEnd returns the IntervalEnd field value
func (o *Bin) GetIntervalEnd() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IntervalEnd
}

// GetIntervalEndOk returns a tuple with the IntervalEnd field value
// and a boolean to check if the value has been set.
func (o *Bin) GetIntervalEndOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntervalEnd, true
}

// SetIntervalEnd sets field value
func (o *Bin) SetIntervalEnd(v string) {
	o.IntervalEnd = v
}

// GetIntervalStart returns the IntervalStart field value
func (o *Bin) GetIntervalStart() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IntervalStart
}

// GetIntervalStartOk returns a tuple with the IntervalStart field value
// and a boolean to check if the value has been set.
func (o *Bin) GetIntervalStartOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntervalStart, true
}

// SetIntervalStart sets field value
func (o *Bin) SetIntervalStart(v string) {
	o.IntervalStart = v
}

func (o Bin) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Bin) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	toSerialize["interval_end"] = o.IntervalEnd
	toSerialize["interval_start"] = o.IntervalStart
	return toSerialize, nil
}

func (o *Bin) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"count",
		"interval_end",
		"interval_start",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBin := _Bin{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBin)

	if err != nil {
		return err
	}

	*o = Bin(varBin)

	return err
}

type NullableBin struct {
	value *Bin
	isSet bool
}

func (v NullableBin) Get() *Bin {
	return v.value
}

func (v *NullableBin) Set(val *Bin) {
	v.value = val
	v.isSet = true
}

func (v NullableBin) IsSet() bool {
	return v.isSet
}

func (v *NullableBin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBin(val *Bin) *NullableBin {
	return &NullableBin{value: val, isSet: true}
}

func (v NullableBin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


