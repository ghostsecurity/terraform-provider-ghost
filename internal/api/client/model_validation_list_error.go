/*
Ghost API

The Ghost API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ValidationListError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidationListError{}

// ValidationListError struct for ValidationListError
type ValidationListError struct {
	Errors []ValidationError `json:"errors"`
}

type _ValidationListError ValidationListError

// NewValidationListError instantiates a new ValidationListError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidationListError(errors []ValidationError) *ValidationListError {
	this := ValidationListError{}
	this.Errors = errors
	return &this
}

// NewValidationListErrorWithDefaults instantiates a new ValidationListError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidationListErrorWithDefaults() *ValidationListError {
	this := ValidationListError{}
	return &this
}

// GetErrors returns the Errors field value
func (o *ValidationListError) GetErrors() []ValidationError {
	if o == nil {
		var ret []ValidationError
		return ret
	}

	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value
// and a boolean to check if the value has been set.
func (o *ValidationListError) GetErrorsOk() ([]ValidationError, bool) {
	if o == nil {
		return nil, false
	}
	return o.Errors, true
}

// SetErrors sets field value
func (o *ValidationListError) SetErrors(v []ValidationError) {
	o.Errors = v
}

func (o ValidationListError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidationListError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["errors"] = o.Errors
	return toSerialize, nil
}

func (o *ValidationListError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"errors",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varValidationListError := _ValidationListError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varValidationListError)

	if err != nil {
		return err
	}

	*o = ValidationListError(varValidationListError)

	return err
}

type NullableValidationListError struct {
	value *ValidationListError
	isSet bool
}

func (v NullableValidationListError) Get() *ValidationListError {
	return v.value
}

func (v *NullableValidationListError) Set(val *ValidationListError) {
	v.value = val
	v.isSet = true
}

func (v NullableValidationListError) IsSet() bool {
	return v.isSet
}

func (v *NullableValidationListError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidationListError(val *ValidationListError) *NullableValidationListError {
	return &NullableValidationListError{value: val, isSet: true}
}

func (v NullableValidationListError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidationListError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


