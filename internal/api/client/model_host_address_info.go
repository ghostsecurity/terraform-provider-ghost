/*
Ghost API

The Ghost API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HostAddressInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HostAddressInfo{}

// HostAddressInfo struct for HostAddressInfo
type HostAddressInfo struct {
	Address string `json:"address"`
	Provider string `json:"provider"`
}

type _HostAddressInfo HostAddressInfo

// NewHostAddressInfo instantiates a new HostAddressInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostAddressInfo(address string, provider string) *HostAddressInfo {
	this := HostAddressInfo{}
	this.Address = address
	this.Provider = provider
	return &this
}

// NewHostAddressInfoWithDefaults instantiates a new HostAddressInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostAddressInfoWithDefaults() *HostAddressInfo {
	this := HostAddressInfo{}
	return &this
}

// GetAddress returns the Address field value
func (o *HostAddressInfo) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *HostAddressInfo) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *HostAddressInfo) SetAddress(v string) {
	o.Address = v
}

// GetProvider returns the Provider field value
func (o *HostAddressInfo) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *HostAddressInfo) GetProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *HostAddressInfo) SetProvider(v string) {
	o.Provider = v
}

func (o HostAddressInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HostAddressInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["provider"] = o.Provider
	return toSerialize, nil
}

func (o *HostAddressInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"provider",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHostAddressInfo := _HostAddressInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHostAddressInfo)

	if err != nil {
		return err
	}

	*o = HostAddressInfo(varHostAddressInfo)

	return err
}

type NullableHostAddressInfo struct {
	value *HostAddressInfo
	isSet bool
}

func (v NullableHostAddressInfo) Get() *HostAddressInfo {
	return v.value
}

func (v *NullableHostAddressInfo) Set(val *HostAddressInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableHostAddressInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableHostAddressInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostAddressInfo(val *HostAddressInfo) *NullableHostAddressInfo {
	return &NullableHostAddressInfo{value: val, isSet: true}
}

func (v NullableHostAddressInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostAddressInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


