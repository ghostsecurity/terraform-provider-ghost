/*
Ghost API

The Ghost API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the IssueUpdateParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IssueUpdateParams{}

// IssueUpdateParams struct for IssueUpdateParams
type IssueUpdateParams struct {
	Category *string `json:"category,omitempty"`
	Description *string `json:"description,omitempty"`
	Name *string `json:"name,omitempty"`
	RemediationSteps *string `json:"remediation_steps,omitempty"`
	ReproductionSteps *string `json:"reproduction_steps,omitempty"`
	Severity *string `json:"severity,omitempty"`
}

// NewIssueUpdateParams instantiates a new IssueUpdateParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueUpdateParams() *IssueUpdateParams {
	this := IssueUpdateParams{}
	return &this
}

// NewIssueUpdateParamsWithDefaults instantiates a new IssueUpdateParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueUpdateParamsWithDefaults() *IssueUpdateParams {
	this := IssueUpdateParams{}
	return &this
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *IssueUpdateParams) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueUpdateParams) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *IssueUpdateParams) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *IssueUpdateParams) SetCategory(v string) {
	o.Category = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *IssueUpdateParams) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueUpdateParams) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *IssueUpdateParams) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *IssueUpdateParams) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IssueUpdateParams) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueUpdateParams) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IssueUpdateParams) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IssueUpdateParams) SetName(v string) {
	o.Name = &v
}

// GetRemediationSteps returns the RemediationSteps field value if set, zero value otherwise.
func (o *IssueUpdateParams) GetRemediationSteps() string {
	if o == nil || IsNil(o.RemediationSteps) {
		var ret string
		return ret
	}
	return *o.RemediationSteps
}

// GetRemediationStepsOk returns a tuple with the RemediationSteps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueUpdateParams) GetRemediationStepsOk() (*string, bool) {
	if o == nil || IsNil(o.RemediationSteps) {
		return nil, false
	}
	return o.RemediationSteps, true
}

// HasRemediationSteps returns a boolean if a field has been set.
func (o *IssueUpdateParams) HasRemediationSteps() bool {
	if o != nil && !IsNil(o.RemediationSteps) {
		return true
	}

	return false
}

// SetRemediationSteps gets a reference to the given string and assigns it to the RemediationSteps field.
func (o *IssueUpdateParams) SetRemediationSteps(v string) {
	o.RemediationSteps = &v
}

// GetReproductionSteps returns the ReproductionSteps field value if set, zero value otherwise.
func (o *IssueUpdateParams) GetReproductionSteps() string {
	if o == nil || IsNil(o.ReproductionSteps) {
		var ret string
		return ret
	}
	return *o.ReproductionSteps
}

// GetReproductionStepsOk returns a tuple with the ReproductionSteps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueUpdateParams) GetReproductionStepsOk() (*string, bool) {
	if o == nil || IsNil(o.ReproductionSteps) {
		return nil, false
	}
	return o.ReproductionSteps, true
}

// HasReproductionSteps returns a boolean if a field has been set.
func (o *IssueUpdateParams) HasReproductionSteps() bool {
	if o != nil && !IsNil(o.ReproductionSteps) {
		return true
	}

	return false
}

// SetReproductionSteps gets a reference to the given string and assigns it to the ReproductionSteps field.
func (o *IssueUpdateParams) SetReproductionSteps(v string) {
	o.ReproductionSteps = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *IssueUpdateParams) GetSeverity() string {
	if o == nil || IsNil(o.Severity) {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueUpdateParams) GetSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *IssueUpdateParams) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *IssueUpdateParams) SetSeverity(v string) {
	o.Severity = &v
}

func (o IssueUpdateParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssueUpdateParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.RemediationSteps) {
		toSerialize["remediation_steps"] = o.RemediationSteps
	}
	if !IsNil(o.ReproductionSteps) {
		toSerialize["reproduction_steps"] = o.ReproductionSteps
	}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	return toSerialize, nil
}

type NullableIssueUpdateParams struct {
	value *IssueUpdateParams
	isSet bool
}

func (v NullableIssueUpdateParams) Get() *IssueUpdateParams {
	return v.value
}

func (v *NullableIssueUpdateParams) Set(val *IssueUpdateParams) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueUpdateParams) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueUpdateParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueUpdateParams(val *IssueUpdateParams) *NullableIssueUpdateParams {
	return &NullableIssueUpdateParams{value: val, isSet: true}
}

func (v NullableIssueUpdateParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueUpdateParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


