/*
Ghost API

The Ghost API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IssueCategoryCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IssueCategoryCreate{}

// IssueCategoryCreate struct for IssueCategoryCreate
type IssueCategoryCreate struct {
	BestPractices string `json:"best_practices"`
	Description string `json:"description"`
	ExecutiveSummary string `json:"executive_summary"`
	Icon *Icon `json:"icon,omitempty"`
	Name string `json:"name"`
}

type _IssueCategoryCreate IssueCategoryCreate

// NewIssueCategoryCreate instantiates a new IssueCategoryCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueCategoryCreate(bestPractices string, description string, executiveSummary string, name string) *IssueCategoryCreate {
	this := IssueCategoryCreate{}
	this.BestPractices = bestPractices
	this.Description = description
	this.ExecutiveSummary = executiveSummary
	this.Name = name
	return &this
}

// NewIssueCategoryCreateWithDefaults instantiates a new IssueCategoryCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueCategoryCreateWithDefaults() *IssueCategoryCreate {
	this := IssueCategoryCreate{}
	return &this
}

// GetBestPractices returns the BestPractices field value
func (o *IssueCategoryCreate) GetBestPractices() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BestPractices
}

// GetBestPracticesOk returns a tuple with the BestPractices field value
// and a boolean to check if the value has been set.
func (o *IssueCategoryCreate) GetBestPracticesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BestPractices, true
}

// SetBestPractices sets field value
func (o *IssueCategoryCreate) SetBestPractices(v string) {
	o.BestPractices = v
}

// GetDescription returns the Description field value
func (o *IssueCategoryCreate) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *IssueCategoryCreate) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *IssueCategoryCreate) SetDescription(v string) {
	o.Description = v
}

// GetExecutiveSummary returns the ExecutiveSummary field value
func (o *IssueCategoryCreate) GetExecutiveSummary() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExecutiveSummary
}

// GetExecutiveSummaryOk returns a tuple with the ExecutiveSummary field value
// and a boolean to check if the value has been set.
func (o *IssueCategoryCreate) GetExecutiveSummaryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExecutiveSummary, true
}

// SetExecutiveSummary sets field value
func (o *IssueCategoryCreate) SetExecutiveSummary(v string) {
	o.ExecutiveSummary = v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *IssueCategoryCreate) GetIcon() Icon {
	if o == nil || IsNil(o.Icon) {
		var ret Icon
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueCategoryCreate) GetIconOk() (*Icon, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *IssueCategoryCreate) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given Icon and assigns it to the Icon field.
func (o *IssueCategoryCreate) SetIcon(v Icon) {
	o.Icon = &v
}

// GetName returns the Name field value
func (o *IssueCategoryCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *IssueCategoryCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *IssueCategoryCreate) SetName(v string) {
	o.Name = v
}

func (o IssueCategoryCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssueCategoryCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["best_practices"] = o.BestPractices
	toSerialize["description"] = o.Description
	toSerialize["executive_summary"] = o.ExecutiveSummary
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *IssueCategoryCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"best_practices",
		"description",
		"executive_summary",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIssueCategoryCreate := _IssueCategoryCreate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIssueCategoryCreate)

	if err != nil {
		return err
	}

	*o = IssueCategoryCreate(varIssueCategoryCreate)

	return err
}

type NullableIssueCategoryCreate struct {
	value *IssueCategoryCreate
	isSet bool
}

func (v NullableIssueCategoryCreate) Get() *IssueCategoryCreate {
	return v.value
}

func (v *NullableIssueCategoryCreate) Set(val *IssueCategoryCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueCategoryCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueCategoryCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueCategoryCreate(val *IssueCategoryCreate) *NullableIssueCategoryCreate {
	return &NullableIssueCategoryCreate{value: val, isSet: true}
}

func (v NullableIssueCategoryCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueCategoryCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


