/*
Ghost API

The Ghost API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiCounts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiCounts{}

// ApiCounts struct for ApiCounts
type ApiCounts struct {
	FirstParty int32 `json:"first_party"`
	ThirdParty int32 `json:"third_party"`
	Total int32 `json:"total"`
}

type _ApiCounts ApiCounts

// NewApiCounts instantiates a new ApiCounts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiCounts(firstParty int32, thirdParty int32, total int32) *ApiCounts {
	this := ApiCounts{}
	this.FirstParty = firstParty
	this.ThirdParty = thirdParty
	this.Total = total
	return &this
}

// NewApiCountsWithDefaults instantiates a new ApiCounts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiCountsWithDefaults() *ApiCounts {
	this := ApiCounts{}
	return &this
}

// GetFirstParty returns the FirstParty field value
func (o *ApiCounts) GetFirstParty() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FirstParty
}

// GetFirstPartyOk returns a tuple with the FirstParty field value
// and a boolean to check if the value has been set.
func (o *ApiCounts) GetFirstPartyOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstParty, true
}

// SetFirstParty sets field value
func (o *ApiCounts) SetFirstParty(v int32) {
	o.FirstParty = v
}

// GetThirdParty returns the ThirdParty field value
func (o *ApiCounts) GetThirdParty() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ThirdParty
}

// GetThirdPartyOk returns a tuple with the ThirdParty field value
// and a boolean to check if the value has been set.
func (o *ApiCounts) GetThirdPartyOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ThirdParty, true
}

// SetThirdParty sets field value
func (o *ApiCounts) SetThirdParty(v int32) {
	o.ThirdParty = v
}

// GetTotal returns the Total field value
func (o *ApiCounts) GetTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *ApiCounts) GetTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *ApiCounts) SetTotal(v int32) {
	o.Total = v
}

func (o ApiCounts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiCounts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["first_party"] = o.FirstParty
	toSerialize["third_party"] = o.ThirdParty
	toSerialize["total"] = o.Total
	return toSerialize, nil
}

func (o *ApiCounts) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"first_party",
		"third_party",
		"total",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiCounts := _ApiCounts{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiCounts)

	if err != nil {
		return err
	}

	*o = ApiCounts(varApiCounts)

	return err
}

type NullableApiCounts struct {
	value *ApiCounts
	isSet bool
}

func (v NullableApiCounts) Get() *ApiCounts {
	return v.value
}

func (v *NullableApiCounts) Set(val *ApiCounts) {
	v.value = val
	v.isSet = true
}

func (v NullableApiCounts) IsSet() bool {
	return v.isSet
}

func (v *NullableApiCounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiCounts(val *ApiCounts) *NullableApiCounts {
	return &NullableApiCounts{value: val, isSet: true}
}

func (v NullableApiCounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiCounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


