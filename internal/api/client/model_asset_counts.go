/*
Ghost API

The Ghost API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AssetCounts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssetCounts{}

// AssetCounts struct for AssetCounts
type AssetCounts struct {
	Script AssetCount `json:"script"`
}

type _AssetCounts AssetCounts

// NewAssetCounts instantiates a new AssetCounts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssetCounts(script AssetCount) *AssetCounts {
	this := AssetCounts{}
	this.Script = script
	return &this
}

// NewAssetCountsWithDefaults instantiates a new AssetCounts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetCountsWithDefaults() *AssetCounts {
	this := AssetCounts{}
	return &this
}

// GetScript returns the Script field value
func (o *AssetCounts) GetScript() AssetCount {
	if o == nil {
		var ret AssetCount
		return ret
	}

	return o.Script
}

// GetScriptOk returns a tuple with the Script field value
// and a boolean to check if the value has been set.
func (o *AssetCounts) GetScriptOk() (*AssetCount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Script, true
}

// SetScript sets field value
func (o *AssetCounts) SetScript(v AssetCount) {
	o.Script = v
}

func (o AssetCounts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssetCounts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["script"] = o.Script
	return toSerialize, nil
}

func (o *AssetCounts) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"script",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAssetCounts := _AssetCounts{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAssetCounts)

	if err != nil {
		return err
	}

	*o = AssetCounts(varAssetCounts)

	return err
}

type NullableAssetCounts struct {
	value *AssetCounts
	isSet bool
}

func (v NullableAssetCounts) Get() *AssetCounts {
	return v.value
}

func (v *NullableAssetCounts) Set(val *AssetCounts) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetCounts) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetCounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetCounts(val *AssetCounts) *NullableAssetCounts {
	return &NullableAssetCounts{value: val, isSet: true}
}

func (v NullableAssetCounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetCounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


