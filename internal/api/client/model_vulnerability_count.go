/*
Ghost API

The Ghost API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VulnerabilityCount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VulnerabilityCount{}

// VulnerabilityCount struct for VulnerabilityCount
type VulnerabilityCount struct {
	Active int32 `json:"active"`
	Resolved int32 `json:"resolved"`
	Suppressed int32 `json:"suppressed"`
	Total int32 `json:"total"`
}

type _VulnerabilityCount VulnerabilityCount

// NewVulnerabilityCount instantiates a new VulnerabilityCount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVulnerabilityCount(active int32, resolved int32, suppressed int32, total int32) *VulnerabilityCount {
	this := VulnerabilityCount{}
	this.Active = active
	this.Resolved = resolved
	this.Suppressed = suppressed
	this.Total = total
	return &this
}

// NewVulnerabilityCountWithDefaults instantiates a new VulnerabilityCount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVulnerabilityCountWithDefaults() *VulnerabilityCount {
	this := VulnerabilityCount{}
	return &this
}

// GetActive returns the Active field value
func (o *VulnerabilityCount) GetActive() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *VulnerabilityCount) GetActiveOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *VulnerabilityCount) SetActive(v int32) {
	o.Active = v
}

// GetResolved returns the Resolved field value
func (o *VulnerabilityCount) GetResolved() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Resolved
}

// GetResolvedOk returns a tuple with the Resolved field value
// and a boolean to check if the value has been set.
func (o *VulnerabilityCount) GetResolvedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Resolved, true
}

// SetResolved sets field value
func (o *VulnerabilityCount) SetResolved(v int32) {
	o.Resolved = v
}

// GetSuppressed returns the Suppressed field value
func (o *VulnerabilityCount) GetSuppressed() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Suppressed
}

// GetSuppressedOk returns a tuple with the Suppressed field value
// and a boolean to check if the value has been set.
func (o *VulnerabilityCount) GetSuppressedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Suppressed, true
}

// SetSuppressed sets field value
func (o *VulnerabilityCount) SetSuppressed(v int32) {
	o.Suppressed = v
}

// GetTotal returns the Total field value
func (o *VulnerabilityCount) GetTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *VulnerabilityCount) GetTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *VulnerabilityCount) SetTotal(v int32) {
	o.Total = v
}

func (o VulnerabilityCount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VulnerabilityCount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["active"] = o.Active
	toSerialize["resolved"] = o.Resolved
	toSerialize["suppressed"] = o.Suppressed
	toSerialize["total"] = o.Total
	return toSerialize, nil
}

func (o *VulnerabilityCount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"active",
		"resolved",
		"suppressed",
		"total",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVulnerabilityCount := _VulnerabilityCount{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVulnerabilityCount)

	if err != nil {
		return err
	}

	*o = VulnerabilityCount(varVulnerabilityCount)

	return err
}

type NullableVulnerabilityCount struct {
	value *VulnerabilityCount
	isSet bool
}

func (v NullableVulnerabilityCount) Get() *VulnerabilityCount {
	return v.value
}

func (v *NullableVulnerabilityCount) Set(val *VulnerabilityCount) {
	v.value = val
	v.isSet = true
}

func (v NullableVulnerabilityCount) IsSet() bool {
	return v.isSet
}

func (v *NullableVulnerabilityCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVulnerabilityCount(val *VulnerabilityCount) *NullableVulnerabilityCount {
	return &NullableVulnerabilityCount{value: val, isSet: true}
}

func (v NullableVulnerabilityCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVulnerabilityCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


