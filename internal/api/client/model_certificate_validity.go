/*
Ghost API

The Ghost API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CertificateValidity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateValidity{}

// CertificateValidity struct for CertificateValidity
type CertificateValidity struct {
	NotAfter string `json:"not_after"`
	NotBefore string `json:"not_before"`
}

type _CertificateValidity CertificateValidity

// NewCertificateValidity instantiates a new CertificateValidity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateValidity(notAfter string, notBefore string) *CertificateValidity {
	this := CertificateValidity{}
	this.NotAfter = notAfter
	this.NotBefore = notBefore
	return &this
}

// NewCertificateValidityWithDefaults instantiates a new CertificateValidity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateValidityWithDefaults() *CertificateValidity {
	this := CertificateValidity{}
	return &this
}

// GetNotAfter returns the NotAfter field value
func (o *CertificateValidity) GetNotAfter() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotAfter
}

// GetNotAfterOk returns a tuple with the NotAfter field value
// and a boolean to check if the value has been set.
func (o *CertificateValidity) GetNotAfterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotAfter, true
}

// SetNotAfter sets field value
func (o *CertificateValidity) SetNotAfter(v string) {
	o.NotAfter = v
}

// GetNotBefore returns the NotBefore field value
func (o *CertificateValidity) GetNotBefore() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotBefore
}

// GetNotBeforeOk returns a tuple with the NotBefore field value
// and a boolean to check if the value has been set.
func (o *CertificateValidity) GetNotBeforeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotBefore, true
}

// SetNotBefore sets field value
func (o *CertificateValidity) SetNotBefore(v string) {
	o.NotBefore = v
}

func (o CertificateValidity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateValidity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["not_after"] = o.NotAfter
	toSerialize["not_before"] = o.NotBefore
	return toSerialize, nil
}

func (o *CertificateValidity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"not_after",
		"not_before",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCertificateValidity := _CertificateValidity{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCertificateValidity)

	if err != nil {
		return err
	}

	*o = CertificateValidity(varCertificateValidity)

	return err
}

type NullableCertificateValidity struct {
	value *CertificateValidity
	isSet bool
}

func (v NullableCertificateValidity) Get() *CertificateValidity {
	return v.value
}

func (v *NullableCertificateValidity) Set(val *CertificateValidity) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateValidity) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateValidity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateValidity(val *CertificateValidity) *NullableCertificateValidity {
	return &NullableCertificateValidity{value: val, isSet: true}
}

func (v NullableCertificateValidity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateValidity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


