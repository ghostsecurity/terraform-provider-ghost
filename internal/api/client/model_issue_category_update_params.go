/*
Ghost API

The Ghost API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the IssueCategoryUpdateParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IssueCategoryUpdateParams{}

// IssueCategoryUpdateParams struct for IssueCategoryUpdateParams
type IssueCategoryUpdateParams struct {
	BestPractices *string `json:"best_practices,omitempty"`
	Description *string `json:"description,omitempty"`
	ExecutiveSummary *string `json:"executive_summary,omitempty"`
	Icon *Icon `json:"icon,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewIssueCategoryUpdateParams instantiates a new IssueCategoryUpdateParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueCategoryUpdateParams() *IssueCategoryUpdateParams {
	this := IssueCategoryUpdateParams{}
	return &this
}

// NewIssueCategoryUpdateParamsWithDefaults instantiates a new IssueCategoryUpdateParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueCategoryUpdateParamsWithDefaults() *IssueCategoryUpdateParams {
	this := IssueCategoryUpdateParams{}
	return &this
}

// GetBestPractices returns the BestPractices field value if set, zero value otherwise.
func (o *IssueCategoryUpdateParams) GetBestPractices() string {
	if o == nil || IsNil(o.BestPractices) {
		var ret string
		return ret
	}
	return *o.BestPractices
}

// GetBestPracticesOk returns a tuple with the BestPractices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueCategoryUpdateParams) GetBestPracticesOk() (*string, bool) {
	if o == nil || IsNil(o.BestPractices) {
		return nil, false
	}
	return o.BestPractices, true
}

// HasBestPractices returns a boolean if a field has been set.
func (o *IssueCategoryUpdateParams) HasBestPractices() bool {
	if o != nil && !IsNil(o.BestPractices) {
		return true
	}

	return false
}

// SetBestPractices gets a reference to the given string and assigns it to the BestPractices field.
func (o *IssueCategoryUpdateParams) SetBestPractices(v string) {
	o.BestPractices = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *IssueCategoryUpdateParams) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueCategoryUpdateParams) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *IssueCategoryUpdateParams) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *IssueCategoryUpdateParams) SetDescription(v string) {
	o.Description = &v
}

// GetExecutiveSummary returns the ExecutiveSummary field value if set, zero value otherwise.
func (o *IssueCategoryUpdateParams) GetExecutiveSummary() string {
	if o == nil || IsNil(o.ExecutiveSummary) {
		var ret string
		return ret
	}
	return *o.ExecutiveSummary
}

// GetExecutiveSummaryOk returns a tuple with the ExecutiveSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueCategoryUpdateParams) GetExecutiveSummaryOk() (*string, bool) {
	if o == nil || IsNil(o.ExecutiveSummary) {
		return nil, false
	}
	return o.ExecutiveSummary, true
}

// HasExecutiveSummary returns a boolean if a field has been set.
func (o *IssueCategoryUpdateParams) HasExecutiveSummary() bool {
	if o != nil && !IsNil(o.ExecutiveSummary) {
		return true
	}

	return false
}

// SetExecutiveSummary gets a reference to the given string and assigns it to the ExecutiveSummary field.
func (o *IssueCategoryUpdateParams) SetExecutiveSummary(v string) {
	o.ExecutiveSummary = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *IssueCategoryUpdateParams) GetIcon() Icon {
	if o == nil || IsNil(o.Icon) {
		var ret Icon
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueCategoryUpdateParams) GetIconOk() (*Icon, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *IssueCategoryUpdateParams) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given Icon and assigns it to the Icon field.
func (o *IssueCategoryUpdateParams) SetIcon(v Icon) {
	o.Icon = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IssueCategoryUpdateParams) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueCategoryUpdateParams) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IssueCategoryUpdateParams) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IssueCategoryUpdateParams) SetName(v string) {
	o.Name = &v
}

func (o IssueCategoryUpdateParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssueCategoryUpdateParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BestPractices) {
		toSerialize["best_practices"] = o.BestPractices
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ExecutiveSummary) {
		toSerialize["executive_summary"] = o.ExecutiveSummary
	}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableIssueCategoryUpdateParams struct {
	value *IssueCategoryUpdateParams
	isSet bool
}

func (v NullableIssueCategoryUpdateParams) Get() *IssueCategoryUpdateParams {
	return v.value
}

func (v *NullableIssueCategoryUpdateParams) Set(val *IssueCategoryUpdateParams) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueCategoryUpdateParams) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueCategoryUpdateParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueCategoryUpdateParams(val *IssueCategoryUpdateParams) *NullableIssueCategoryUpdateParams {
	return &NullableIssueCategoryUpdateParams{value: val, isSet: true}
}

func (v NullableIssueCategoryUpdateParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueCategoryUpdateParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


