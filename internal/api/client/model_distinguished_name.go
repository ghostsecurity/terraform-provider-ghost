/*
Ghost API

The Ghost API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DistinguishedName type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DistinguishedName{}

// DistinguishedName struct for DistinguishedName
type DistinguishedName struct {
	CommonName string `json:"common_name"`
	Country []string `json:"country,omitempty"`
	Locality []string `json:"locality,omitempty"`
	Organization []string `json:"organization,omitempty"`
	OrganizationalUnit []string `json:"organizational_unit,omitempty"`
	PostalCode []string `json:"postal_code,omitempty"`
	Province []string `json:"province,omitempty"`
	SerialNumber *string `json:"serial_number,omitempty"`
	StreetAddress []string `json:"street_address,omitempty"`
}

type _DistinguishedName DistinguishedName

// NewDistinguishedName instantiates a new DistinguishedName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDistinguishedName(commonName string) *DistinguishedName {
	this := DistinguishedName{}
	this.CommonName = commonName
	return &this
}

// NewDistinguishedNameWithDefaults instantiates a new DistinguishedName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDistinguishedNameWithDefaults() *DistinguishedName {
	this := DistinguishedName{}
	return &this
}

// GetCommonName returns the CommonName field value
func (o *DistinguishedName) GetCommonName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommonName
}

// GetCommonNameOk returns a tuple with the CommonName field value
// and a boolean to check if the value has been set.
func (o *DistinguishedName) GetCommonNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommonName, true
}

// SetCommonName sets field value
func (o *DistinguishedName) SetCommonName(v string) {
	o.CommonName = v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *DistinguishedName) GetCountry() []string {
	if o == nil || IsNil(o.Country) {
		var ret []string
		return ret
	}
	return o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DistinguishedName) GetCountryOk() ([]string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *DistinguishedName) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given []string and assigns it to the Country field.
func (o *DistinguishedName) SetCountry(v []string) {
	o.Country = v
}

// GetLocality returns the Locality field value if set, zero value otherwise.
func (o *DistinguishedName) GetLocality() []string {
	if o == nil || IsNil(o.Locality) {
		var ret []string
		return ret
	}
	return o.Locality
}

// GetLocalityOk returns a tuple with the Locality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DistinguishedName) GetLocalityOk() ([]string, bool) {
	if o == nil || IsNil(o.Locality) {
		return nil, false
	}
	return o.Locality, true
}

// HasLocality returns a boolean if a field has been set.
func (o *DistinguishedName) HasLocality() bool {
	if o != nil && !IsNil(o.Locality) {
		return true
	}

	return false
}

// SetLocality gets a reference to the given []string and assigns it to the Locality field.
func (o *DistinguishedName) SetLocality(v []string) {
	o.Locality = v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *DistinguishedName) GetOrganization() []string {
	if o == nil || IsNil(o.Organization) {
		var ret []string
		return ret
	}
	return o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DistinguishedName) GetOrganizationOk() ([]string, bool) {
	if o == nil || IsNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *DistinguishedName) HasOrganization() bool {
	if o != nil && !IsNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given []string and assigns it to the Organization field.
func (o *DistinguishedName) SetOrganization(v []string) {
	o.Organization = v
}

// GetOrganizationalUnit returns the OrganizationalUnit field value if set, zero value otherwise.
func (o *DistinguishedName) GetOrganizationalUnit() []string {
	if o == nil || IsNil(o.OrganizationalUnit) {
		var ret []string
		return ret
	}
	return o.OrganizationalUnit
}

// GetOrganizationalUnitOk returns a tuple with the OrganizationalUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DistinguishedName) GetOrganizationalUnitOk() ([]string, bool) {
	if o == nil || IsNil(o.OrganizationalUnit) {
		return nil, false
	}
	return o.OrganizationalUnit, true
}

// HasOrganizationalUnit returns a boolean if a field has been set.
func (o *DistinguishedName) HasOrganizationalUnit() bool {
	if o != nil && !IsNil(o.OrganizationalUnit) {
		return true
	}

	return false
}

// SetOrganizationalUnit gets a reference to the given []string and assigns it to the OrganizationalUnit field.
func (o *DistinguishedName) SetOrganizationalUnit(v []string) {
	o.OrganizationalUnit = v
}

// GetPostalCode returns the PostalCode field value if set, zero value otherwise.
func (o *DistinguishedName) GetPostalCode() []string {
	if o == nil || IsNil(o.PostalCode) {
		var ret []string
		return ret
	}
	return o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DistinguishedName) GetPostalCodeOk() ([]string, bool) {
	if o == nil || IsNil(o.PostalCode) {
		return nil, false
	}
	return o.PostalCode, true
}

// HasPostalCode returns a boolean if a field has been set.
func (o *DistinguishedName) HasPostalCode() bool {
	if o != nil && !IsNil(o.PostalCode) {
		return true
	}

	return false
}

// SetPostalCode gets a reference to the given []string and assigns it to the PostalCode field.
func (o *DistinguishedName) SetPostalCode(v []string) {
	o.PostalCode = v
}

// GetProvince returns the Province field value if set, zero value otherwise.
func (o *DistinguishedName) GetProvince() []string {
	if o == nil || IsNil(o.Province) {
		var ret []string
		return ret
	}
	return o.Province
}

// GetProvinceOk returns a tuple with the Province field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DistinguishedName) GetProvinceOk() ([]string, bool) {
	if o == nil || IsNil(o.Province) {
		return nil, false
	}
	return o.Province, true
}

// HasProvince returns a boolean if a field has been set.
func (o *DistinguishedName) HasProvince() bool {
	if o != nil && !IsNil(o.Province) {
		return true
	}

	return false
}

// SetProvince gets a reference to the given []string and assigns it to the Province field.
func (o *DistinguishedName) SetProvince(v []string) {
	o.Province = v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *DistinguishedName) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DistinguishedName) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *DistinguishedName) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *DistinguishedName) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetStreetAddress returns the StreetAddress field value if set, zero value otherwise.
func (o *DistinguishedName) GetStreetAddress() []string {
	if o == nil || IsNil(o.StreetAddress) {
		var ret []string
		return ret
	}
	return o.StreetAddress
}

// GetStreetAddressOk returns a tuple with the StreetAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DistinguishedName) GetStreetAddressOk() ([]string, bool) {
	if o == nil || IsNil(o.StreetAddress) {
		return nil, false
	}
	return o.StreetAddress, true
}

// HasStreetAddress returns a boolean if a field has been set.
func (o *DistinguishedName) HasStreetAddress() bool {
	if o != nil && !IsNil(o.StreetAddress) {
		return true
	}

	return false
}

// SetStreetAddress gets a reference to the given []string and assigns it to the StreetAddress field.
func (o *DistinguishedName) SetStreetAddress(v []string) {
	o.StreetAddress = v
}

func (o DistinguishedName) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DistinguishedName) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["common_name"] = o.CommonName
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.Locality) {
		toSerialize["locality"] = o.Locality
	}
	if !IsNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	if !IsNil(o.OrganizationalUnit) {
		toSerialize["organizational_unit"] = o.OrganizationalUnit
	}
	if !IsNil(o.PostalCode) {
		toSerialize["postal_code"] = o.PostalCode
	}
	if !IsNil(o.Province) {
		toSerialize["province"] = o.Province
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["serial_number"] = o.SerialNumber
	}
	if !IsNil(o.StreetAddress) {
		toSerialize["street_address"] = o.StreetAddress
	}
	return toSerialize, nil
}

func (o *DistinguishedName) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"common_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDistinguishedName := _DistinguishedName{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDistinguishedName)

	if err != nil {
		return err
	}

	*o = DistinguishedName(varDistinguishedName)

	return err
}

type NullableDistinguishedName struct {
	value *DistinguishedName
	isSet bool
}

func (v NullableDistinguishedName) Get() *DistinguishedName {
	return v.value
}

func (v *NullableDistinguishedName) Set(val *DistinguishedName) {
	v.value = val
	v.isSet = true
}

func (v NullableDistinguishedName) IsSet() bool {
	return v.isSet
}

func (v *NullableDistinguishedName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDistinguishedName(val *DistinguishedName) *NullableDistinguishedName {
	return &NullableDistinguishedName{value: val, isSet: true}
}

func (v NullableDistinguishedName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDistinguishedName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


