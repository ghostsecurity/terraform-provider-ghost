/*
Ghost API

The Ghost API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Issue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Issue{}

// Issue struct for Issue
type Issue struct {
	Category IssueCategory `json:"category"`
	Description string `json:"description"`
	Id string `json:"id"`
	Name string `json:"name"`
	RemediationSteps string `json:"remediation_steps"`
	ReproductionSteps string `json:"reproduction_steps"`
	ResourceKind string `json:"resource_kind"`
	Severity string `json:"severity"`
	Vulnerabilities *VulnerabilityCount `json:"vulnerabilities,omitempty"`
}

type _Issue Issue

// NewIssue instantiates a new Issue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssue(category IssueCategory, description string, id string, name string, remediationSteps string, reproductionSteps string, resourceKind string, severity string) *Issue {
	this := Issue{}
	this.Category = category
	this.Description = description
	this.Id = id
	this.Name = name
	this.RemediationSteps = remediationSteps
	this.ReproductionSteps = reproductionSteps
	this.ResourceKind = resourceKind
	this.Severity = severity
	return &this
}

// NewIssueWithDefaults instantiates a new Issue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueWithDefaults() *Issue {
	this := Issue{}
	return &this
}

// GetCategory returns the Category field value
func (o *Issue) GetCategory() IssueCategory {
	if o == nil {
		var ret IssueCategory
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *Issue) GetCategoryOk() (*IssueCategory, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *Issue) SetCategory(v IssueCategory) {
	o.Category = v
}

// GetDescription returns the Description field value
func (o *Issue) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Issue) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Issue) SetDescription(v string) {
	o.Description = v
}

// GetId returns the Id field value
func (o *Issue) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Issue) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Issue) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Issue) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Issue) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Issue) SetName(v string) {
	o.Name = v
}

// GetRemediationSteps returns the RemediationSteps field value
func (o *Issue) GetRemediationSteps() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RemediationSteps
}

// GetRemediationStepsOk returns a tuple with the RemediationSteps field value
// and a boolean to check if the value has been set.
func (o *Issue) GetRemediationStepsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemediationSteps, true
}

// SetRemediationSteps sets field value
func (o *Issue) SetRemediationSteps(v string) {
	o.RemediationSteps = v
}

// GetReproductionSteps returns the ReproductionSteps field value
func (o *Issue) GetReproductionSteps() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReproductionSteps
}

// GetReproductionStepsOk returns a tuple with the ReproductionSteps field value
// and a boolean to check if the value has been set.
func (o *Issue) GetReproductionStepsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReproductionSteps, true
}

// SetReproductionSteps sets field value
func (o *Issue) SetReproductionSteps(v string) {
	o.ReproductionSteps = v
}

// GetResourceKind returns the ResourceKind field value
func (o *Issue) GetResourceKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceKind
}

// GetResourceKindOk returns a tuple with the ResourceKind field value
// and a boolean to check if the value has been set.
func (o *Issue) GetResourceKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceKind, true
}

// SetResourceKind sets field value
func (o *Issue) SetResourceKind(v string) {
	o.ResourceKind = v
}

// GetSeverity returns the Severity field value
func (o *Issue) GetSeverity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value
// and a boolean to check if the value has been set.
func (o *Issue) GetSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Severity, true
}

// SetSeverity sets field value
func (o *Issue) SetSeverity(v string) {
	o.Severity = v
}

// GetVulnerabilities returns the Vulnerabilities field value if set, zero value otherwise.
func (o *Issue) GetVulnerabilities() VulnerabilityCount {
	if o == nil || IsNil(o.Vulnerabilities) {
		var ret VulnerabilityCount
		return ret
	}
	return *o.Vulnerabilities
}

// GetVulnerabilitiesOk returns a tuple with the Vulnerabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetVulnerabilitiesOk() (*VulnerabilityCount, bool) {
	if o == nil || IsNil(o.Vulnerabilities) {
		return nil, false
	}
	return o.Vulnerabilities, true
}

// HasVulnerabilities returns a boolean if a field has been set.
func (o *Issue) HasVulnerabilities() bool {
	if o != nil && !IsNil(o.Vulnerabilities) {
		return true
	}

	return false
}

// SetVulnerabilities gets a reference to the given VulnerabilityCount and assigns it to the Vulnerabilities field.
func (o *Issue) SetVulnerabilities(v VulnerabilityCount) {
	o.Vulnerabilities = &v
}

func (o Issue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Issue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["category"] = o.Category
	toSerialize["description"] = o.Description
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["remediation_steps"] = o.RemediationSteps
	toSerialize["reproduction_steps"] = o.ReproductionSteps
	toSerialize["resource_kind"] = o.ResourceKind
	toSerialize["severity"] = o.Severity
	if !IsNil(o.Vulnerabilities) {
		toSerialize["vulnerabilities"] = o.Vulnerabilities
	}
	return toSerialize, nil
}

func (o *Issue) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"category",
		"description",
		"id",
		"name",
		"remediation_steps",
		"reproduction_steps",
		"resource_kind",
		"severity",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIssue := _Issue{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIssue)

	if err != nil {
		return err
	}

	*o = Issue(varIssue)

	return err
}

type NullableIssue struct {
	value *Issue
	isSet bool
}

func (v NullableIssue) Get() *Issue {
	return v.value
}

func (v *NullableIssue) Set(val *Issue) {
	v.value = val
	v.isSet = true
}

func (v NullableIssue) IsSet() bool {
	return v.isSet
}

func (v *NullableIssue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssue(val *Issue) *NullableIssue {
	return &NullableIssue{value: val, isSet: true}
}

func (v NullableIssue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


