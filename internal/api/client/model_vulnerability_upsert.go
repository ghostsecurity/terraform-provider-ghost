/*
Ghost API

The Ghost API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VulnerabilityUpsert type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VulnerabilityUpsert{}

// VulnerabilityUpsert struct for VulnerabilityUpsert
type VulnerabilityUpsert struct {
	DemoData *string `json:"demo_data,omitempty"`
	IssueId string `json:"issue_id"`
	ResourceId string `json:"resource_id"`
}

type _VulnerabilityUpsert VulnerabilityUpsert

// NewVulnerabilityUpsert instantiates a new VulnerabilityUpsert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVulnerabilityUpsert(issueId string, resourceId string) *VulnerabilityUpsert {
	this := VulnerabilityUpsert{}
	this.IssueId = issueId
	this.ResourceId = resourceId
	return &this
}

// NewVulnerabilityUpsertWithDefaults instantiates a new VulnerabilityUpsert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVulnerabilityUpsertWithDefaults() *VulnerabilityUpsert {
	this := VulnerabilityUpsert{}
	return &this
}

// GetDemoData returns the DemoData field value if set, zero value otherwise.
func (o *VulnerabilityUpsert) GetDemoData() string {
	if o == nil || IsNil(o.DemoData) {
		var ret string
		return ret
	}
	return *o.DemoData
}

// GetDemoDataOk returns a tuple with the DemoData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VulnerabilityUpsert) GetDemoDataOk() (*string, bool) {
	if o == nil || IsNil(o.DemoData) {
		return nil, false
	}
	return o.DemoData, true
}

// HasDemoData returns a boolean if a field has been set.
func (o *VulnerabilityUpsert) HasDemoData() bool {
	if o != nil && !IsNil(o.DemoData) {
		return true
	}

	return false
}

// SetDemoData gets a reference to the given string and assigns it to the DemoData field.
func (o *VulnerabilityUpsert) SetDemoData(v string) {
	o.DemoData = &v
}

// GetIssueId returns the IssueId field value
func (o *VulnerabilityUpsert) GetIssueId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IssueId
}

// GetIssueIdOk returns a tuple with the IssueId field value
// and a boolean to check if the value has been set.
func (o *VulnerabilityUpsert) GetIssueIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssueId, true
}

// SetIssueId sets field value
func (o *VulnerabilityUpsert) SetIssueId(v string) {
	o.IssueId = v
}

// GetResourceId returns the ResourceId field value
func (o *VulnerabilityUpsert) GetResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *VulnerabilityUpsert) GetResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceId, true
}

// SetResourceId sets field value
func (o *VulnerabilityUpsert) SetResourceId(v string) {
	o.ResourceId = v
}

func (o VulnerabilityUpsert) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VulnerabilityUpsert) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DemoData) {
		toSerialize["demo_data"] = o.DemoData
	}
	toSerialize["issue_id"] = o.IssueId
	toSerialize["resource_id"] = o.ResourceId
	return toSerialize, nil
}

func (o *VulnerabilityUpsert) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"issue_id",
		"resource_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVulnerabilityUpsert := _VulnerabilityUpsert{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVulnerabilityUpsert)

	if err != nil {
		return err
	}

	*o = VulnerabilityUpsert(varVulnerabilityUpsert)

	return err
}

type NullableVulnerabilityUpsert struct {
	value *VulnerabilityUpsert
	isSet bool
}

func (v NullableVulnerabilityUpsert) Get() *VulnerabilityUpsert {
	return v.value
}

func (v *NullableVulnerabilityUpsert) Set(val *VulnerabilityUpsert) {
	v.value = val
	v.isSet = true
}

func (v NullableVulnerabilityUpsert) IsSet() bool {
	return v.isSet
}

func (v *NullableVulnerabilityUpsert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVulnerabilityUpsert(val *VulnerabilityUpsert) *NullableVulnerabilityUpsert {
	return &NullableVulnerabilityUpsert{value: val, isSet: true}
}

func (v NullableVulnerabilityUpsert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVulnerabilityUpsert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


