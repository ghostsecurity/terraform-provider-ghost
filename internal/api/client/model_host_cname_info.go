/*
Ghost API

The Ghost API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HostCNAMEInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HostCNAMEInfo{}

// HostCNAMEInfo struct for HostCNAMEInfo
type HostCNAMEInfo struct {
	Host string `json:"host"`
	Provider string `json:"provider"`
}

type _HostCNAMEInfo HostCNAMEInfo

// NewHostCNAMEInfo instantiates a new HostCNAMEInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostCNAMEInfo(host string, provider string) *HostCNAMEInfo {
	this := HostCNAMEInfo{}
	this.Host = host
	this.Provider = provider
	return &this
}

// NewHostCNAMEInfoWithDefaults instantiates a new HostCNAMEInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostCNAMEInfoWithDefaults() *HostCNAMEInfo {
	this := HostCNAMEInfo{}
	return &this
}

// GetHost returns the Host field value
func (o *HostCNAMEInfo) GetHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *HostCNAMEInfo) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Host, true
}

// SetHost sets field value
func (o *HostCNAMEInfo) SetHost(v string) {
	o.Host = v
}

// GetProvider returns the Provider field value
func (o *HostCNAMEInfo) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *HostCNAMEInfo) GetProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *HostCNAMEInfo) SetProvider(v string) {
	o.Provider = v
}

func (o HostCNAMEInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HostCNAMEInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["host"] = o.Host
	toSerialize["provider"] = o.Provider
	return toSerialize, nil
}

func (o *HostCNAMEInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"host",
		"provider",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHostCNAMEInfo := _HostCNAMEInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHostCNAMEInfo)

	if err != nil {
		return err
	}

	*o = HostCNAMEInfo(varHostCNAMEInfo)

	return err
}

type NullableHostCNAMEInfo struct {
	value *HostCNAMEInfo
	isSet bool
}

func (v NullableHostCNAMEInfo) Get() *HostCNAMEInfo {
	return v.value
}

func (v *NullableHostCNAMEInfo) Set(val *HostCNAMEInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableHostCNAMEInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableHostCNAMEInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostCNAMEInfo(val *HostCNAMEInfo) *NullableHostCNAMEInfo {
	return &NullableHostCNAMEInfo{value: val, isSet: true}
}

func (v NullableHostCNAMEInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostCNAMEInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


