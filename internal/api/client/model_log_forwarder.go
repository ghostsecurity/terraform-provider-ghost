/*
Ghost API

The Ghost API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LogForwarder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogForwarder{}

// LogForwarder struct for LogForwarder
type LogForwarder struct {
	AccountId *string `json:"account_id,omitempty"`
	CreatedAt string `json:"created_at"`
	Id string `json:"id"`
	IsHealthy *bool `json:"is_healthy,omitempty"`
	LastProcessedAt *string `json:"last_processed_at,omitempty"`
	Name string `json:"name"`
	Region *string `json:"region,omitempty"`
	StackId *string `json:"stack_id,omitempty"`
	SubjectId string `json:"subject_id"`
}

type _LogForwarder LogForwarder

// NewLogForwarder instantiates a new LogForwarder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogForwarder(createdAt string, id string, name string, subjectId string) *LogForwarder {
	this := LogForwarder{}
	this.CreatedAt = createdAt
	this.Id = id
	this.Name = name
	this.SubjectId = subjectId
	return &this
}

// NewLogForwarderWithDefaults instantiates a new LogForwarder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogForwarderWithDefaults() *LogForwarder {
	this := LogForwarder{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *LogForwarder) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogForwarder) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *LogForwarder) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *LogForwarder) SetAccountId(v string) {
	o.AccountId = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *LogForwarder) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *LogForwarder) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *LogForwarder) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetId returns the Id field value
func (o *LogForwarder) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LogForwarder) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LogForwarder) SetId(v string) {
	o.Id = v
}

// GetIsHealthy returns the IsHealthy field value if set, zero value otherwise.
func (o *LogForwarder) GetIsHealthy() bool {
	if o == nil || IsNil(o.IsHealthy) {
		var ret bool
		return ret
	}
	return *o.IsHealthy
}

// GetIsHealthyOk returns a tuple with the IsHealthy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogForwarder) GetIsHealthyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsHealthy) {
		return nil, false
	}
	return o.IsHealthy, true
}

// HasIsHealthy returns a boolean if a field has been set.
func (o *LogForwarder) HasIsHealthy() bool {
	if o != nil && !IsNil(o.IsHealthy) {
		return true
	}

	return false
}

// SetIsHealthy gets a reference to the given bool and assigns it to the IsHealthy field.
func (o *LogForwarder) SetIsHealthy(v bool) {
	o.IsHealthy = &v
}

// GetLastProcessedAt returns the LastProcessedAt field value if set, zero value otherwise.
func (o *LogForwarder) GetLastProcessedAt() string {
	if o == nil || IsNil(o.LastProcessedAt) {
		var ret string
		return ret
	}
	return *o.LastProcessedAt
}

// GetLastProcessedAtOk returns a tuple with the LastProcessedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogForwarder) GetLastProcessedAtOk() (*string, bool) {
	if o == nil || IsNil(o.LastProcessedAt) {
		return nil, false
	}
	return o.LastProcessedAt, true
}

// HasLastProcessedAt returns a boolean if a field has been set.
func (o *LogForwarder) HasLastProcessedAt() bool {
	if o != nil && !IsNil(o.LastProcessedAt) {
		return true
	}

	return false
}

// SetLastProcessedAt gets a reference to the given string and assigns it to the LastProcessedAt field.
func (o *LogForwarder) SetLastProcessedAt(v string) {
	o.LastProcessedAt = &v
}

// GetName returns the Name field value
func (o *LogForwarder) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LogForwarder) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LogForwarder) SetName(v string) {
	o.Name = v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *LogForwarder) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogForwarder) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *LogForwarder) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *LogForwarder) SetRegion(v string) {
	o.Region = &v
}

// GetStackId returns the StackId field value if set, zero value otherwise.
func (o *LogForwarder) GetStackId() string {
	if o == nil || IsNil(o.StackId) {
		var ret string
		return ret
	}
	return *o.StackId
}

// GetStackIdOk returns a tuple with the StackId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogForwarder) GetStackIdOk() (*string, bool) {
	if o == nil || IsNil(o.StackId) {
		return nil, false
	}
	return o.StackId, true
}

// HasStackId returns a boolean if a field has been set.
func (o *LogForwarder) HasStackId() bool {
	if o != nil && !IsNil(o.StackId) {
		return true
	}

	return false
}

// SetStackId gets a reference to the given string and assigns it to the StackId field.
func (o *LogForwarder) SetStackId(v string) {
	o.StackId = &v
}

// GetSubjectId returns the SubjectId field value
func (o *LogForwarder) GetSubjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubjectId
}

// GetSubjectIdOk returns a tuple with the SubjectId field value
// and a boolean to check if the value has been set.
func (o *LogForwarder) GetSubjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubjectId, true
}

// SetSubjectId sets field value
func (o *LogForwarder) SetSubjectId(v string) {
	o.SubjectId = v
}

func (o LogForwarder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogForwarder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["id"] = o.Id
	if !IsNil(o.IsHealthy) {
		toSerialize["is_healthy"] = o.IsHealthy
	}
	if !IsNil(o.LastProcessedAt) {
		toSerialize["last_processed_at"] = o.LastProcessedAt
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.StackId) {
		toSerialize["stack_id"] = o.StackId
	}
	toSerialize["subject_id"] = o.SubjectId
	return toSerialize, nil
}

func (o *LogForwarder) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created_at",
		"id",
		"name",
		"subject_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogForwarder := _LogForwarder{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLogForwarder)

	if err != nil {
		return err
	}

	*o = LogForwarder(varLogForwarder)

	return err
}

type NullableLogForwarder struct {
	value *LogForwarder
	isSet bool
}

func (v NullableLogForwarder) Get() *LogForwarder {
	return v.value
}

func (v *NullableLogForwarder) Set(val *LogForwarder) {
	v.value = val
	v.isSet = true
}

func (v NullableLogForwarder) IsSet() bool {
	return v.isSet
}

func (v *NullableLogForwarder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogForwarder(val *LogForwarder) *NullableLogForwarder {
	return &NullableLogForwarder{value: val, isSet: true}
}

func (v NullableLogForwarder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogForwarder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


